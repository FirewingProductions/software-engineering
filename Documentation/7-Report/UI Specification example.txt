Main Menu (MainMenu):

1 - Link main menu buttons up to the appopriate forms (using hide/show or create/destroy)

	NB: creating/destroying forms other than the main menu would be ideal, as it will 
	dispose of un-needed data automatically

2 - Place logo in the logo panel (did not have access to logo image at time of creation)

3 - Place the main method for the entire program here, along with all rlevant code

4 - Initialise a game instance within this form, pass it as a parameter to proceeding forms




Single Match Set Up Page (setting_window):

1 - Link main menu buttons up to the appopriate forms (using hide/show or create/destroy)

	NB: creating/destroying forms other than the main menu would be ideal, as it will 
	dispose of un-needed data automatically

2 - Link up the text fields in world generation to the generate world method

	NB: will also need to write a validation method to validate the text field's contents
	to ensure only integers are entered

3 - Link up the "Load World" file chooser to the load world method, also ensure the open
    button on the file chooser checks if a world file is valid before loading it into 
    the game instance

4 - Link up the "Load Player" file chooser to the ant brain parser and loader

	NB: should initially load the ant brain into a buffer, and then load the ant 
	brain and player together once the "Load Player" button is pressed

5 - Link the "Player Name" text field to an internal buffer to temporarily store the player name
    so that it can be loaded as a new player object once the "Load Player" button is pressed

	NB: Need to write a validation method for player names, to ensure they are valid 
	(perhaps a maximum length, or some illegal characters?)

6 - Link the "Load Player" button to generate a new player entity to post to the simulation,
    and clear all relevant fields and buffers upon a sucessful push to the simulation

	NB: if there are errors with the play name, this should spark some pop-ups here,
	whereas errors with the ant brain should be checked once the "open" button on the
	file chooser is pressed

7 - Link the validation of world file load, and player loading to the text labels listed in
    "jPanel_Single_Settings_PlayerGen_Status_CriteriaCheck", and do not allow the simulation
    to run until all of these text labels read out as the same text

	NB: upon validation of a specific critera, set the text of the label to a preset,
	eg: once world is valid, change the text of the world label to "YES", and then lock
	any further form of world input. This would require all the labels to be initialised 
	to "NO" or something else appropriate




Simulation Main Page (simulation_window):

1 - Link main menu buttons up to the appopriate forms (using hide/show or create/destroy)

	NB: creating/destroying forms other than the main menu would be ideal, as it will 
	dispose of un-needed data automatically

2 - Link the simulation log to "key events" within the simulation time

	NB: I'm not sure of how to do this from skimming our back end, however this log can
	be re-purposed for anything to do with simulation output, whatever is deemed most
	appropriate can be placed within it

3 - Link the simulation area to whatever form of visualisation is best suited given our time
    constraints

	NB: I'd have liked to display a hex grid here with ants moving as in the simulation,
	but after some research the sheer speed of the simulation would cause serious refresh
	issues, and as such I'd reccomend a more compact status display. This could include
	a list of images to represent how many ants of each colour are alive, 
	a food counter for each side, etc.




Tournament setup page (simulation_window_tournament):


1 - Link main menu buttons up to the appopriate forms (using hide/show or create/destroy)

	NB: creating/destroying forms other than the main menu would be ideal, as it will 
	dispose of un-needed data automatically

2 - Link up the text fields in world generation to the generate world method

	NB: will also need to write a validation method to validate the text field's contents
	to ensure only integers are entered

3 - Link up the "Load World" file chooser to the load world method, also ensure the open
    button on the file chooser checks if a world file is valid before loading it into 
    the game instance

4 - Link up the "Load Player" file chooser to the ant brain parser and loader

	NB: should initially load the ant brain into a buffer, and then load the ant 
	brain and player together once the "Load Player" button is pressed

5 - Link the "Player Name" text field to an internal buffer to temporarily store the player name
    so that it can be loaded as a new player object once the "Load Player" button is pressed

	NB: Need to write a validation method for player names, to ensure they are valid 
	(perhaps a maximum length, or some illegal characters?)

6 - Link the "Load Player" button to generate a new player entity to post to the simulation,
    and clear all relevant fields and buffers upon a sucessful push to the simulation

	NB: if there are errors with the play name, this should spark some pop-ups here,
	whereas errors with the ant brain should be checked once the "open" button on the
	file chooser is pressed

7 - Link the validation of world file load, and player loading to the text labels listed in
    "jPanel_Single_Settings_PlayerGen_Status_CriteriaCheck", and do not allow the simulation
    to run until all of these text labels read out as the same text

	NB: upon validation of a specific critera, set the text of the label to a preset,
	eg: once world is valid, change the text of the world label to "YES", and then lock
	any further form of world input. This would require all the labels to be initialised 
	to "NO" or something else appropriate
 require all the labels to be initialised 
	to "NO" or something else appropriate

8 - Implement some form of validation to ensure the number of players partaking in the tournament
    as given by the drop-down box is the number of players in the player array

9 - Implements an integer validation for the number of players field, and ensure that when 
    generating players for a tournament the number of players generated does not exceed the number
    given within this text field
	NB: on click of the "confirm" button, this should lock the player number entry field,
	such that it cannot be changed. Also, before the confirm button is clicked with a valid
	number of players, player entry should be locked.